# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines for those models you wish to give write DB access
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from django.db import models

class Alias(models.Model):
    id = models.BigIntegerField(primary_key=True)
    entity = models.ForeignKey('Entity')
    name = models.CharField(max_length=200)
    context = models.CharField(max_length=50, blank=True)
    is_primary = models.IntegerField()
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    last_user_id = models.BigIntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'alias'

class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=80)
    class Meta:
        managed = False
        db_table = 'auth_group'

class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey('AuthPermission')
    class Meta:
        managed = False
        db_table = 'auth_group_permissions'

class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=50)
    content_type = models.ForeignKey('DjangoContentType')
    codename = models.CharField(max_length=100)
    class Meta:
        managed = False
        db_table = 'auth_permission'

class AuthUser(models.Model):
    id = models.IntegerField(primary_key=True)
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField()
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=75)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'auth_user'

class AuthUserGroups(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    group = models.ForeignKey(AuthGroup)
    class Meta:
        managed = False
        db_table = 'auth_user_groups'

class AuthUserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(AuthUser)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'

class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)
    action_time = models.DateTimeField()
    user = models.ForeignKey(AuthUser)
    content_type = models.ForeignKey('DjangoContentType', blank=True, null=True)
    object_id = models.TextField(blank=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.IntegerField()
    change_message = models.TextField()
    class Meta:
        managed = False
        db_table = 'django_admin_log'

class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)
    class Meta:
        managed = False
        db_table = 'django_content_type'

class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        managed = False
        db_table = 'django_session'

class Entity(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.CharField(max_length=200, blank=True)
    blurb = models.CharField(max_length=200, blank=True)
    summary = models.TextField(blank=True)
    notes = models.TextField(blank=True)
    website = models.CharField(max_length=100, blank=True)
    parent = models.ForeignKey('self', blank=True, null=True)
    primary_ext = models.CharField(max_length=50)
    merged_id = models.BigIntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    start_date = models.CharField(max_length=10, blank=True)
    end_date = models.CharField(max_length=10, blank=True)
    is_current = models.IntegerField(blank=True, null=True)
    last_user_id = models.BigIntegerField(blank=True, null=True)
    is_deleted = models.IntegerField()
    class Meta:
        managed = False
        db_table = 'entity'

class ExtensionDefinition(models.Model):
    id = models.BigIntegerField(primary_key=True)
    name = models.CharField(max_length=30)
    display_name = models.CharField(max_length=50)
    has_fields = models.IntegerField()
    parent = models.ForeignKey('self', blank=True, null=True)
    tier = models.BigIntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'extension_definition'

class ExtensionRecord(models.Model):
    id = models.BigIntegerField(primary_key=True)
    entity = models.ForeignKey(Entity)
    definition = models.ForeignKey(ExtensionDefinition)
    last_user_id = models.BigIntegerField(blank=True, null=True)
    class Meta:
        managed = False
        db_table = 'extension_record'

class ParliamentaryConstituency(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=300)
    typeof = models.CharField(max_length=5)
    state = models.ForeignKey('States')
    class Meta:
        managed = False
        db_table = 'parliamentary_constituency'

class States(models.Model):
    id = models.IntegerField(primary_key=True)
    isocode = models.CharField(unique=True, max_length=5)
    fullname = models.CharField(max_length=200)
    typeof = models.CharField(max_length=1)
    class Meta:
        managed = False
        db_table = 'states'

